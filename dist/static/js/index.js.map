{"version":3,"file":"static/js/index.js","sources":["/home/yodit/frelance/amelia-team-webui/src/App.css","/home/yodit/frelance/amelia-team-webui/src/features/gemini-chat/components/ChatWithGemini.module.css","/home/yodit/frelance/amelia-team-webui/src/App.jsx","/home/yodit/frelance/amelia-team-webui/src/config.js","/home/yodit/frelance/amelia-team-webui/src/features/gemini-chat/components/ChatWithGemini.jsx","/home/yodit/frelance/amelia-team-webui/src/features/gemini-chat/hooks/useGemini.jsx","/home/yodit/frelance/amelia-team-webui/src/features/gemini-chat/service/gemini.service.js","/home/yodit/frelance/amelia-team-webui/src/index.jsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      // 1741696958295\n      var cssReload = require(\"../node_modules/@rsbuild/core/node_modules/@rspack/core/dist/builtin-plugin/css-extract/hmr/hotModuleReplacement.js\")(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","// extracted by css-extract-rspack-plugin\nexport default {\"container\":\"src-features-gemini-chat-components-ChatWithGemini-module__container-tEvqyc\",\"messages\":\"src-features-gemini-chat-components-ChatWithGemini-module__messages-CVOZ2k\",\"messageInputContainer\":\"src-features-gemini-chat-components-ChatWithGemini-module__messageInputContainer-KbdaCb\",\"textarea\":\"src-features-gemini-chat-components-ChatWithGemini-module__textarea-sLnamV\",\"sendButton\":\"src-features-gemini-chat-components-ChatWithGemini-module__sendButton-ByC5e6\",\"clearButton\":\"src-features-gemini-chat-components-ChatWithGemini-module__clearButton-WlGEW8\",\"message\":\"src-features-gemini-chat-components-ChatWithGemini-module__message-CRQp78\",\"userMessage\":\"src-features-gemini-chat-components-ChatWithGemini-module__userMessage-LVenYB\",\"botMessage\":\"src-features-gemini-chat-components-ChatWithGemini-module__botMessage-Hllaos\",\"loader\":\"src-features-gemini-chat-components-ChatWithGemini-module__loader-avC6HB\",\"dot\":\"src-features-gemini-chat-components-ChatWithGemini-module__dot-LqkZQH\",\"blink\":\"src-features-gemini-chat-components-ChatWithGemini-module__blink-B5bxSg\",\"textRenderer\":\"src-features-gemini-chat-components-ChatWithGemini-module__textRenderer-Clqiyf\"};\n    if(module.hot) {\n      // 1741696958297\n      var cssReload = require(\"../../../../node_modules/@rsbuild/core/node_modules/@rspack/core/dist/builtin-plugin/css-extract/hmr/hotModuleReplacement.js\")(module.id, {\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  ","import \"./App.css\";\nimport ChatWithGemini from \"./features/gemini-chat/components/ChatWithGemini\";\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"content\">\n\t\t\t<section className=\"chat\">\n\t\t\t\t<ChatWithGemini />\n\t\t\t</section>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","export const config = {\n    \"API_KEY\": process.env.GEMINI_AI_API_KEY,\n    \"AMELIA_PROMPT\": process.env.AMELIA_SYSTEM_PROMPT,\n}","import { useEffect, useRef, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport ReactMarkdown from \"react-markdown\";\nimport useGemini from \"../hooks/useGemini\";\nimport styles from \"./ChatWithGemini.module.css\";\n\nconst ChatWithGemini = () => {\n\tconst { messages, loading, sendMessages, updateMessage } = useGemini();\t\n\tconst [input, setInput] = useState(\"\");\n\n\tconst AlwaysScrollToBottom = () => {\n\t\tconst elementRef = useRef();\n\t\tuseEffect(() =>\n\t\t\telementRef.current.scrollIntoView({\n\t\t\t\tbehavior: \"smooth\",\n\t\t\t\tblock: \"start\",\n\t\t\t\tinline: \"nearest\",\n\t\t\t}),\n\t\t);\n\t\treturn <div ref={elementRef} />;\n\t};\n\n\tconst handleSend = async () => {\n\t\tif (!input) return;\n\t\tsetInput(\"\");\n\t\tupdateMessage([...messages, { role: \"user\", parts: [{ text: input }] }]);\n\t\tsendMessages({ message: input, history: messages });\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className={styles.container}>\n\t\t\t\t<div className={styles.messages}>\n\t\t\t\t\t{messages.length > 0 ? (\n\t\t\t\t\t\tmessages.map((message, index) => (\n\t\t\t\t\t\t\t<RenderMessage\n\t\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\t\tkey={`chat-message-${index}-${message.role}`}\n\t\t\t\t\t\t\t\tmessageLength={messages.length}\n\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\tmsgIndex={index}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Introduction />\n\t\t\t\t\t)}\n\t\t\t\t\t<AlwaysScrollToBottom />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={styles.messageInputContainer}>\n\t\t\t\t<textarea\n\t\t\t\t\tplaceholder=\"Type a message\"\n\t\t\t\t\tvalue={input || \"\"}\n\t\t\t\t\trows=\"3\"\n\t\t\t\t\tclassName={styles.textarea}\n\t\t\t\t\tonChange={(e) => setInput(e.target.value)}\n\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\tif (e.key === \"Enter\" && !e.shiftKey) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\thandleSend();\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName={styles.sendButton}\n\t\t\t\t\t\tonClick={handleSend}\n\t\t\t\t\t>\n\t\t\t\t\t\tSend\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName={styles.clearButton}\n\t\t\t\t\t\tonClick={() => updateMessage([])}\n\t\t\t\t\t>\n\t\t\t\t\t\tClear\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nconst Introduction = () => {\n\tconst TextRenderer = ({ value = \"\", direction = \"r\", size = \"large\" }) => (\n\t\t<div\n\t\t\tclassName={styles.textRenderer}\n\t\t\tstyle={{\n\t\t\t\tfontSize: size,\n\t\t\t\tbackgroundImage: `linear-gradient(to-${direction}, #63B3ED, #319795)`,\n\t\t\t}}\n\t\t>\n\t\t\t{value}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center\">\n\t\t\t<div className=\"flex flex-col items-center justify-center\">\n\t\t\t\t<TextRenderer value=\"Amelia Chat\" size=\"xxx-large\" />\n\t\t\t</div>\n\t\t\t<div className=\"flex flex-col items-center justify-center\">\n\t\t\t\t<TextRenderer value=\"I am a virtual sales agent created by the Amelia team\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nconst RenderMessage = ({ message, msgIndex, loading, messageLength}) => {\n\tconst { parts, role } = message;\n\tconst Loader = () =>\n\t\tmsgIndex === messageLength - 1 &&\n\t\tloading && (\n\t\t\t<div className={styles.loader} key={`chat-message-${msgIndex}-loader`}>\n\t\t\t\t<div className={styles.dot} />\n\t\t\t\t<div className={styles.dot} />\n\t\t\t\t<div className={styles.dot} />\n\t\t\t</div>\n\t\t);\n\n\treturn parts?.map((part, index) =>\n\t\tpart.text ? (\n\t\t\t<>\n\t\t\t\t<motion.div\n\t\t\t\t\tclassName={`${styles.message} ${role === \"user\" ? styles.userMessage : styles.botMessage}`}\n\t\t\t\t\tinitial={{\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\tscale: 0.5,\n\t\t\t\t\t\ty: 20,\n\t\t\t\t\t\tx: role === \"user\" ? 20 : -20,\n\t\t\t\t\t}}\n\t\t\t\t\tanimate={{ opacity: 1, scale: 1, y: 0, x: 0 }}\n\t\t\t\t\tkey={`motion-message-part-${index}-${role}}`}\n\t\t\t\t>\n\t\t\t\t\t<ReactMarkdown\n\t\t\t\t\t\tkey={`motion-message-part-${index}=${encodeURIComponent(part.text)}`}\n\t\t\t\t\t\tcomponents={{\n\t\t\t\t\t\t\tp: ({ node, ...props }) => <div {...props} className=\"text-sm\" />,\n\t\t\t\t\t\t\tcode: ({ node, ...props }) => (\n\t\t\t\t\t\t\t\t<pre\n\t\t\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t\t\t\tclassName=\"text-sm font-mono text-white bg-slate-800 rounded-md p-2 overflow-auto m-2\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{part.text}\n\t\t\t\t\t</ReactMarkdown>\n\t\t\t\t</motion.div>\n\t\t\t\t<Loader\n\t\t\t\t\tkey={`chat-message-${index}-${encodeURIComponent(part.text)}-loader`}\n\t\t\t\t/>\n\t\t\t</>\n\t\t) : (\n\t\t\t<Loader\n\t\t\t\tkey={`chat-message-${index}-${encodeURIComponent(part.text)}-loader`}\n\t\t\t/>\n\t\t),\n\t);\n};\n\nexport default ChatWithGemini;\n","import { useEffect, useState } from \"react\";\nimport GeminiService from \"../service/gemini.service\";\n\nexport default function useGemini() {\n\tconst [messages, updateMessage] = useState(checkForMessages());\n\tconst [loading, setLoading] = useState(false);\n\n\tfunction checkForMessages() {\n\t\tconst savedMessages = localStorage.getItem(\"messages\");\n\t\treturn savedMessages\n\t\t\t? JSON.parse(savedMessages)\n\t\t\t: [\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trole: \"user\",\n\t\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttext: \"\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trole: \"model\",\n\t\t\t\t\t\t\tparts: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttext: \"¡\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttext: \"Hola! Soy Amelia, un chatbot. Estoy aquí para ayudarte a crear una co\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttext: \"tización para tu chat bot. Por favor, dime más sobre tus necesidades y\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttext: \" requerimientos para que pueda ofrecerte una cotización adecuada. ¿Qué tipo de Chatbot te gustaría desarrollar? ¿Tienes alguna idea de las funcionalidades que debería tener? \\n\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t];\n\t}\n\n\tuseEffect(() => {\n\t\tconst saveMessages = () =>\n\t\t\tlocalStorage.setItem(\"messages\", JSON.stringify(messages));\n\t\twindow.addEventListener(\"beforeunload\", saveMessages);\n\t\treturn () => window.removeEventListener(\"beforeunload\", saveMessages);\n\t}, [messages]);\n\n\tconst sendMessages = async (payload) => {\n\t\tupdateMessage((prevMessages) => [\n\t\t\t...prevMessages,\n\t\t\t{ role: \"model\", parts: [{ text: \"\" }] },\n\t\t]);\n\t\tsetLoading(true);\n\t\ttry {\n\t\t\tconst stream = await GeminiService.sendMessages(\n\t\t\t\tpayload.message,\n\t\t\t\tpayload.history,\n\t\t\t);\n\t\t\tsetLoading(false);\n\t\t\tfor await (const chunk of stream) {\n\t\t\t\tconst chuckText = chunk.text();\n\t\t\t\tupdateMessage((prevMessages) => {\n\t\t\t\t\tconst prevMessageClone = structuredClone(prevMessages);\n\t\t\t\t\tprevMessageClone[prevMessages.length - 1].parts[0].text += chuckText;\n\t\t\t\t\treturn prevMessageClone;\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tupdateMessage([\n\t\t\t\t...messages,\n\t\t\t\t{\n\t\t\t\t\trole: \"model\",\n\t\t\t\t\tparts: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: \"Parece que tengo problemas para conectarme a los servidores.\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t]);\n\t\t\tconsole.error(\"An error occurred:\", error);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\treturn { messages, loading, sendMessages, updateMessage };\n}\n","import { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { config } from \"../../../config\";\n\nconst GeminiService = (() => {\n\tconst MODEL_NAME = \"gemini-1.5-flash\";\n\tconst API_KEY = config.API_KEY;\n\tconst systemInstruction =\n\t\tconfig.AMELIA_PROMPT ||\n\t\t\"AmeliaAIchatbotAmeliaTeam:SpQtsFeatureSugChatProj:Spanish:WebPage,LandingPage,MobileApp,SDKWebview:HumanPricing:ProjSummaryValidation:StrictProjConvers\";\n\tconst genAI = new GoogleGenerativeAI(API_KEY);\n\tconst service = {};\n\n\tservice.sendMessages = async (message, prevChat) => {\n\t\tconst model = genAI.getGenerativeModel({\n\t\t\tmodel: MODEL_NAME,\n\t\t\tsystemInstruction,\n            safetySettings: [\n                {\n                    category: 'HARM_CATEGORY_HATE_SPEECH',\n                    threshold: 'BLOCK_ONLY_HIGH',\n                },\n                {\n                    category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n                    threshold: 'BLOCK_MEDIUM_AND_ABOVE',\n                },\n                {\n                    category: 'HARM_CATEGORY_HARASSMENT',\n                    threshold: 'BLOCK_ONLY_HIGH',\n                },\n                {\n                    category: 'HARM_CATEGORY_DANGEROUS_CONTENT',\n                    threshold: 'BLOCK_NONE',\n                },\n            ]\n\t\t});\n\t\tconst chat = model.startChat({\n\t\t\thistory: prevChat,\n\t\t});\n\t\tconst result = await chat.sendMessageStream(message);\n\t\treturn result.stream;\n\t};\n\n\treturn service;\n})();\n\nexport default GeminiService;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;AAIA;AARA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;;;;;;AACA;AAVA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA;AAAA;AACA;AAAA;;AACA;AAGA;AAEA;AACA;AACA;AAHA;;;;AAOA;;;;;AAEA;;;;;;;;;;;;;;;;AAGA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAOA;AA5EA;;AACA;;;AADA;AA8EA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAIA;AACA;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAvBA;AAyBA;AAAA;AACA;AACA;AAGA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;AAHA;;;;;AAOA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AACA;AACA;AACA;;;;;;;AAGA;AAEA;AAXA;;;;;AAHA;;;;;AAiBA;;;;;;AAKA;;;;;AAKA;AAnDA;AAqDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClKA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AArFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AAEA;AACA;AAEA"}